#+title: README
#+title: README
#+TITLE: EasyAppointments Project Setup and Usage Instructions
#+AUTHOR: Project Maintainer
#+DESCRIPTION: A comprehensive guide to setting up, developing, and testing the EasyAppointments project locally and on Heroku.

* EasyAppointments: Open Source Appointment Scheduler
EasyAppointments is a powerful, highly customizable web application that allows customers to book appointments via a sophisticated web interface. It provides Google Calendar synchronization and supports commercial use. The project can be installed on any server, sharing an existing database and integrating seamlessly into your website.

** Key Features
- Customers and appointments management.
- Services and providers organization.
- Working plan and booking rules.
- Google Calendar synchronization.
- Email notifications system.
- Self-hosted installation.
- Translated user interface.
- User community support.

** Prerequisites
- PHP >= 8.2, Composer, MySQL for database.
- Git and Node.js (with npm) installed.
- XAMPP or LAMPP installed for local development.
- Heroku CLI installed for deployment.

** Local Development Setup

Start XAMPP (or LAMPP):
#+BEGIN_SRC bash
sudo /opt/lampp/lampp start
#+END_SRC
Navigate to the project directory:
#+BEGIN_SRC bash
cd /opt/lampp/htdocs/easyappointments
#+END_SRC
Set up local configuration:

Copy config-sample.php to config.php.
Run the setup script to create .env file and clone Heroku database:
#+BEGIN_SRC bash
./setup_local_env.sh
#+END_SRC

This script will:

Fetch the Heroku database URL
Create a .env file with the database credentials
Clone the Heroku database schema to your local machine


Set correct permissions:
If you've moved the project folder outside of the XAMPP htdocs directory, ensure proper permissions:
#+BEGIN_SRC bash
sudo chown -R $USER:$(id -gn $USER) /path/to/your/project/folder
chmod -R 755 /path/to/your/project/folder
chmod -R 777 /path/to/your/project/folder/storage
#+END_SRC
Install project dependencies:
#+BEGIN_SRC bash
composer install
npm install
#+END_SRC
Start the project:

Open the project in your web browser at:
#+BEGIN_SRC
http://localhost/easyappointments
#+END_SRC
Optionally, start the file watcher for automated builds:
#+BEGIN_SRC bash
npm start
#+END_SRC



** Heroku Deployment and Database Management
*** Command Reference Table

- *JawsDB (MySQL) Commands*
| Operation                  | Command                                                                                    |
|----------------------------+--------------------------------------------------------------------------------------------|
| List Heroku apps           | ~heroku apps~                                                                              |
| Check database add-on      | ~heroku addons --app your-app-name~                                                        |
| Get database URL           | ~heroku config:get JAWSDB_URL --app your-app-name~                                         |
| Dump Heroku database       | ~mysqldump -h host -u username -ppassword database_name > heroku_database_backup.sql~      |
| Create local database      | ~CREATE DATABASE local_database_name;~                                                     |
| Import to local database   | ~mysql -u your_local_username -p local_database_name < heroku_database_backup.sql~         |
| Connect to Heroku database | ~mysql -h host -u username -ppassword database_name~                                       |

- *PostgreSQL Commands (for reference)*
| Operation                  | Command                                                                                    |
|----------------------------+--------------------------------------------------------------------------------------------|
| Pull database to local     | ~heroku pg:pull DATABASE_URL local_database_name --app your-app-name~                      |
| Push local to Heroku       | ~heroku pg:push local_database_name DATABASE_URL --app your-app-name~                      |
| Connect to Heroku database | ~heroku pg:psql --app your-app-name~                                                       |

*** Prerequisites
  - Heroku CLI installed and authenticated
  - MySQL or PostgreSQL installed on your local machine (as applicable)
  - Access to your Heroku app
#+TITLE: Heroku Deployment and Database Management

*** Heroku CLI Commands

| Operation           | Command                                        |
|---------------------+------------------------------------------------|
| Log into Heroku     | ~heroku login~                                 |
| List Heroku apps    | ~heroku apps~                                  |
| View app info       | ~heroku apps:info --app your-app-name~         |
| View Heroku logs    | ~heroku logs --tail --app your-app-name~       |
| Open app in browser | ~heroku open --app your-app-name~              |

*** Database Management

| Operation                 | Command                                                                                   |
|---------------------------+-------------------------------------------------------------------------------------------|
| Check database add-on     | ~heroku addons --app your-app-name~                                                       |
| Get JawsDB URL            | ~heroku config:get JAWSDB_URL --app your-app-name~                                        |
| Connect to Heroku database| ~mysql -h host -u username -ppassword database_name~                                      |
| Dump Heroku database      | ~mysqldump -h host -u username -ppassword database_name > heroku_database_backup.sql~     |
| Import to local database  | ~mysql -u your_local_username -p local_database_name < heroku_database_backup.sql~        |

*** Deployment Process

1. Prepare for deployment:
   Create a ~Procfile~ in the project root:
   #+BEGIN_SRC
   web: php heroku_config.php && vendor/bin/heroku-php-apache2 .
   #+END_SRC

2. Set Heroku environment variables:
   #+BEGIN_SRC bash
   heroku config:set APP_ENV=production --app your-app-name
   heroku config:set BASE_URL=https://your-app-name.herokuapp.com --app your-app-name
   heroku config:set DEBUG_MODE=false --app your-app-name
   #+END_SRC

3. Deploy the project:
   #+BEGIN_SRC bash
   git add .
   git commit -m "Deploy to Heroku"
   git push heroku main
   #+END_SRC

4. Build the project after deployment:
   #+BEGIN_SRC bash
   heroku run npm run build --app your-app-name
   heroku run composer install --no-dev --optimize-autoloader --app your-app-name
   #+END_SRC

*** Database Setup

1. Set up JawsDB:
   #+BEGIN_SRC bash
   heroku addons:create jawsdb:kitefin --app your-app-name
   #+END_SRC

2. Get the JawsDB connection URL:
   #+BEGIN_SRC bash
   heroku config:get JAWSDB_URL --app your-app-name
   #+END_SRC

3. Use the connection details to update your local ~.env~ file for development.

*** Handling Deployments and Rollbacks

| Operation                     | Command                                                    |
|-------------------------------+------------------------------------------------------------|
| Deploy to Heroku              | ~git push heroku main~                                     |
| List recent releases          | ~heroku releases --app your-app-name~                      |
| Rollback to previous version  | ~heroku rollback --app your-app-name~                      |
| Rollback to specific version  | ~heroku rollback v<version_number> --app your-app-name~    |

*** Syncing Heroku with GitHub and Managing Branches

**** Current Repository Status

| Repository     | Status                                     |
|----------------+--------------------------------------------|
| Heroku         | Most recent (currently deployed)           |
| GitHub Remote  | Older than Heroku                          |
| Local          | Most recent (includes local changes)       |

**** Syncing Process

1. Backup current Heroku state:
   #+BEGIN_SRC bash
   git fetch heroku
   git checkout -b heroku-backup heroku/main
   #+END_SRC

2. Push Heroku state to GitHub remote:
   #+BEGIN_SRC bash
   git push origin heroku-backup
   git checkout main
   git reset --hard heroku/main
   git push origin main --force
   #+END_SRC

3. Create a new development branch:
   #+BEGIN_SRC bash
   git checkout -b development
   #+END_SRC

4. Apply local changes to the development branch:
   #+BEGIN_SRC bash
   git stash
   git stash apply
   git add .
   git commit -m "Applied local changes to development branch"
   git push origin development
   #+END_SRC

**** Branch Management

| Branch         | Purpose                                    | Base                |
|----------------+--------------------------------------------+--------------------|
| main           | Production code (synced with Heroku)       | heroku/main        |
| heroku-backup  | Backup of current Heroku deployment        | heroku/main        |
| development    | Local development and testing              | main (after sync)  |

**** Development Workflow

1. Develop and test on the ~development~ branch
2. When ready, merge changes to ~main~:
   #+BEGIN_SRC bash
   git checkout main
   git merge development
   git push origin main
   #+END_SRC
3. Deploy to Heroku:
   #+BEGIN_SRC bash
   git push heroku main
   #+END_SRC

*** Configuration Files

- ~config.php~: Contains local development variables (not pushed to Heroku).
- ~heroku_config.php~: Used in production on Heroku, reads environment variables.
- ~.env~: Contains local environment variables (in .gitignore, not pushed to Heroku).

Ensure that ~heroku_config.php~ is set up to use Heroku environment variables:

#+BEGIN_SRC php
<?php
define('BASE_URL', getenv('BASE_URL'));
define('DB_HOST', getenv('JAWSDB_URL') ? parse_url(getenv('JAWSDB_URL'))['host'] : getenv('DB_HOST'));
define('DB_NAME', getenv('JAWSDB_URL') ? ltrim(parse_url(getenv('JAWSDB_URL'))['path'], '/') : getenv('DB_NAME'));
define('DB_USERNAME', getenv('JAWSDB_URL') ? parse_url(getenv('JAWSDB_URL'))['user'] : getenv('DB_USERNAME'));
define('DB_PASSWORD', getenv('JAWSDB_URL') ? parse_url(getenv('JAWSDB_URL'))['pass'] : getenv('DB_PASSWORD'));
define('DEBUG_MODE', getenv('DEBUG_MODE') === 'true');
#+END_SRC

*** Testing and Debugging

- Run unit tests: ~vendor/bin/phpunit~
- Enable debug mode locally: Set ~DEBUG_MODE=true~ in ~.env~
- Check Heroku logs: ~heroku logs --tail --app your-app-name~

Remember to replace ~your-app-name~ with your actual Heroku app name in all commands.
** License
- Code: Licensed under GPL v3.0.
- Content: Licensed under CC BY 3.0.

For more information, visit:
- Website: https://easyappointments.org
- GitHub: https://github.com/alextselegidis/easyappointments
- Twitter: @alextselegidis
